
'use strict';

let hostrefs = {};
let hostsym = Symbol("hostref");
function hostref(s) {
  if (! (s in hostrefs)) hostrefs[s] = {[hostsym]: s};
  return hostrefs[s];
}
function eq_ref(x, y) {
  return x === y ? 1 : 0;
}

let spectest = {
  hostref: hostref,
  eq_ref: eq_ref,
  print: console.log.bind(console),
  print_i32: console.log.bind(console),
  print_i64: console.log.bind(console),
  print_i32_f32: console.log.bind(console),
  print_f64_f64: console.log.bind(console),
  print_f32: console.log.bind(console),
  print_f64: console.log.bind(console),
  global_i32: 666,
  global_i64: 666n,
  global_f32: 666.6,
  global_f64: 666.6,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  table64: new WebAssembly.Table(
    {initial: 10n, maximum: 20n, element: 'anyfunc', index: 'i64'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),
  memory64: new WebAssembly.Memory({initial: 1n, maximum: 2n, index: 'i64'})
};

let handler = {
  get(target, prop) {
    return (prop in target) ?  target[prop] : {};
  }
};
let registry = new Proxy({spectest}, handler);

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  let validated;
  try {
    validated = WebAssembly.validate(buffer);
  } catch (e) {
    throw new Error("Wasm validate throws");
  }
  if (validated !== valid) {
    throw new Error("Wasm validate failure" + (valid ? "" : " expected"));
  }
  return new WebAssembly.Module(buffer);
}

function instance(mod, imports = registry) {
  return new WebAssembly.Instance(mod, imports);
}

function call(instance, name, args) {
  return instance.exports[name](...args);
}

function get(instance, name) {
  let v = instance.exports[name];
  return (v instanceof WebAssembly.Global) ? v.value : v;
}

function exports(instance) {
  return {module: instance.exports, spectest: spectest};
}

function run(action) {
  action();
}

function assert_malformed(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_malformed_custom(bytes) {
  return;
}

function assert_invalid(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_invalid_custom(bytes) {
  return;
}

function assert_unlinkable(mod) {
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.LinkError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(mod) {
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_exception(action) {
  try { action() } catch (e) { return; }
  throw new Error("exception expected");
}

let StackOverflow;
try { (function f() { 1 + f() })() } catch (e) { StackOverflow = e.constructor }

function assert_exhaustion(action) {
  try { action() } catch (e) {
    if (e instanceof StackOverflow) return;
  }
  throw new Error("Wasm resource exhaustion expected");
}

function assert_return(action, ...expected) {
  let actual = action();
  if (actual === undefined) {
    actual = [];
  } else if (!Array.isArray(actual)) {
    actual = [actual];
  }
  if (actual.length !== expected.length) {
    throw new Error(expected.length + " value(s) expected, got " + actual.length);
  }
  for (let i = 0; i < actual.length; ++i) {
    switch (expected[i]) {
      case "nan:canonical":
      case "nan:arithmetic":
      case "nan:any":
        // Note that JS can't reliably distinguish different NaN values,
        // so there's no good way to test that it's a canonical NaN.
        if (!Number.isNaN(actual[i])) {
          throw new Error("Wasm NaN return value expected, got " + actual[i]);
        };
        return;
      case "ref.i31":
        if (typeof actual[i] !== "number" || (actual[i] & 0x7fffffff) !== actual[i]) {
          throw new Error("Wasm i31 return value expected, got " + actual[i]);
        };
        return;
      case "ref.any":
      case "ref.eq":
      case "ref.struct":
      case "ref.array":
        // For now, JS can't distinguish exported Wasm GC values,
        // so we only test for object.
        if (typeof actual[i] !== "object") {
          throw new Error("Wasm object return value expected, got " + actual[i]);
        };
        return;
      case "ref.func":
        if (typeof actual[i] !== "function") {
          throw new Error("Wasm function return value expected, got " + actual[i]);
        };
        return;
      case "ref.extern":
        if (actual[i] === null) {
          throw new Error("Wasm reference return value expected, got " + actual[i]);
        };
        return;
      case "ref.null":
        if (actual[i] !== null) {
          throw new Error("Wasm null return value expected, got " + actual[i]);
        };
        return;
      default:
        if (!Object.is(actual[i], expected[i])) {
          throw new Error("Wasm return value " + expected[i] + " expected, got " + actual[i]);
        };
    }
  }
}

// imports.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x9e\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x00\x60\x01\x7d\x00\x60\x00\x01\x7f\x60\x00\x01\x7d\x60\x01\x7f\x01\x7f\x60\x01\x7e\x01\x7e\x03\x88\x80\x80\x80\x00\x07\x00\x01\x02\x03\x04\x05\x06\x04\x88\x80\x80\x80\x00\x02\x70\x00\x0a\x70\x01\x0a\x14\x05\x83\x80\x80\x80\x00\x01\x00\x02\x0d\x87\x80\x80\x80\x00\x03\x00\x00\x00\x01\x00\x02\x06\x94\x80\x80\x80\x00\x03\x7f\x00\x41\x37\x0b\x7d\x00\x43\x00\x00\x30\x42\x0b\x7e\x01\x42\xc2\x00\x0b\x07\xc7\x81\x80\x80\x00\x10\x04\x66\x75\x6e\x63\x00\x00\x08\x66\x75\x6e\x63\x2d\x69\x33\x32\x00\x01\x08\x66\x75\x6e\x63\x2d\x66\x33\x32\x00\x02\x09\x66\x75\x6e\x63\x2d\x3e\x69\x33\x32\x00\x03\x09\x66\x75\x6e\x63\x2d\x3e\x66\x33\x32\x00\x04\x0d\x66\x75\x6e\x63\x2d\x69\x33\x32\x2d\x3e\x69\x33\x32\x00\x05\x0d\x66\x75\x6e\x63\x2d\x69\x36\x34\x2d\x3e\x69\x36\x34\x00\x06\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x03\x00\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x66\x33\x32\x03\x01\x0e\x67\x6c\x6f\x62\x61\x6c\x2d\x6d\x75\x74\x2d\x69\x36\x34\x03\x02\x0c\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x69\x6e\x66\x01\x00\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x01\x0c\x6d\x65\x6d\x6f\x72\x79\x2d\x32\x2d\x69\x6e\x66\x02\x00\x03\x74\x61\x67\x04\x00\x07\x74\x61\x67\x2d\x69\x33\x32\x04\x01\x07\x74\x61\x67\x2d\x66\x33\x32\x04\x02\x0a\xbd\x80\x80\x80\x00\x07\x82\x80\x80\x80\x00\x00\x0b\x82\x80\x80\x80\x00\x00\x0b\x82\x80\x80\x80\x00\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x16\x0b\x87\x80\x80\x80\x00\x00\x43\x00\x00\x30\x41\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b");

// imports.wast:3
let $1 = instance($$1);

// imports.wast:25
register("test", $1)

// imports.wast:30
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x08\x60\x01\x7f\x00\x60\x01\x7e\x00\x60\x01\x7d\x00\x60\x01\x7c\x00\x60\x01\x7f\x00\x60\x02\x7f\x7d\x00\x60\x02\x7c\x7c\x00\x60\x01\x7e\x01\x7e\x02\xa3\x83\x80\x80\x00\x14\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x36\x34\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x36\x34\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x66\x33\x32\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0d\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x5f\x66\x33\x32\x00\x05\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0d\x70\x72\x69\x6e\x74\x5f\x66\x36\x34\x5f\x66\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x66\x36\x34\x00\x03\x04\x74\x65\x73\x74\x0d\x66\x75\x6e\x63\x2d\x69\x36\x34\x2d\x3e\x69\x36\x34\x00\x07\x04\x74\x65\x73\x74\x07\x74\x61\x67\x2d\x69\x33\x32\x04\x00\x00\x04\x74\x65\x73\x74\x07\x74\x61\x67\x2d\x66\x33\x32\x04\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x04\x03\x83\x80\x80\x80\x00\x02\x00\x01\x04\x85\x80\x80\x80\x00\x01\x70\x01\x02\x02\x07\xb3\x80\x80\x80\x00\x08\x02\x70\x31\x00\x0b\x02\x70\x32\x00\x0c\x02\x70\x33\x00\x0d\x02\x70\x34\x00\x0d\x02\x70\x35\x00\x0e\x02\x70\x36\x00\x0f\x07\x70\x72\x69\x6e\x74\x33\x32\x00\x12\x07\x70\x72\x69\x6e\x74\x36\x34\x00\x13\x09\x8c\x80\x80\x80\x00\x01\x04\x41\x00\x0b\x02\xd2\x02\x0b\xd2\x05\x0b\x0a\xf0\x80\x80\x80\x00\x02\xac\x80\x80\x80\x00\x01\x01\x7d\x20\x00\xb2\x21\x01\x20\x00\x10\x00\x20\x00\x41\x01\x6a\x43\x00\x00\x28\x42\x10\x06\x20\x00\x10\x02\x20\x00\x10\x08\x20\x01\x10\x04\x20\x00\x41\x00\x11\x00\x00\x0b\xb9\x80\x80\x80\x00\x01\x01\x7c\x20\x00\x10\x0a\xb9\x21\x01\x20\x00\x10\x01\x20\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xa0\x44\x00\x00\x00\x00\x00\x80\x4a\x40\x10\x07\x20\x00\x10\x03\x20\x01\x10\x05\x20\x01\x10\x09\x20\x01\x41\x01\x11\x03\x00\x0b");

// imports.wast:30
let $2 = instance($$2);

// imports.wast:92
assert_return(() => call($2, "print32", [13]));

// imports.wast:93
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x00\x02\xb7\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x07\x70\x72\x69\x6e\x74\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x91\x80\x80\x80\x00\x01\x8b\x80\x80\x80\x00\x00\x02\x40\x42\x18\x10\x00\x0f\x0b\x00\x0b"), exports($2)),  "run", []));  // assert_return(() => call($2, "print64", [int64("24")]))

// imports.wast:95
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x8d\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x04\x66\x75\x6e\x63\x00\x01");

// imports.wast:104
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7f\x00\x02\x96\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x07\x8d\x80\x80\x80\x00\x01\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x01\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x20\x00\x10\x00\x0b");

// imports.wast:104
let $3 = instance($$3);

// imports.wast:111
assert_return(() => call($3, "print_i32", [13]));

// imports.wast:114
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x01\x7f\x00\x60\x02\x7f\x7f\x01\x7f\x02\x96\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x07\x8d\x80\x80\x80\x00\x01\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x01\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x20\x00\x20\x01\x6a\x0b");

// imports.wast:114
let $4 = instance($$4);

// imports.wast:121
assert_return(() => call($4, "print_i32", [5, 11]), 16);

// imports.wast:123
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x8d\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x04\x66\x75\x6e\x63\x00\x00");

// imports.wast:123
let $5 = instance($$5);

// imports.wast:124
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7f\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x08\x66\x75\x6e\x63\x2d\x69\x33\x32\x00\x00");

// imports.wast:124
let $6 = instance($$6);

// imports.wast:125
let $$7 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7d\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x08\x66\x75\x6e\x63\x2d\x66\x33\x32\x00\x00");

// imports.wast:125
let $7 = instance($$7);

// imports.wast:126
let $$8 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x09\x66\x75\x6e\x63\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:126
let $8 = instance($$8);

// imports.wast:127
let $$9 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7d\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x09\x66\x75\x6e\x63\x2d\x3e\x66\x33\x32\x00\x00");

// imports.wast:127
let $9 = instance($$9);

// imports.wast:128
let $$10 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0d\x66\x75\x6e\x63\x2d\x69\x33\x32\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:128
let $10 = instance($$10);

// imports.wast:129
let $$11 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7e\x01\x7e\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0d\x66\x75\x6e\x63\x2d\x69\x36\x34\x2d\x3e\x69\x36\x34\x00\x00");

// imports.wast:129
let $11 = instance($$11);

// imports.wast:132
let $$12 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x90\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x00\x00");

// imports.wast:131
assert_unlinkable($$12);

// imports.wast:136
let $$13 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x00\x00");

// imports.wast:135
assert_unlinkable($$13);

// imports.wast:141
let $$14 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7f\x00\x02\x8d\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x04\x66\x75\x6e\x63\x00\x00");

// imports.wast:140
assert_unlinkable($$14);

// imports.wast:145
let $$15 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x8d\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x04\x66\x75\x6e\x63\x00\x00");

// imports.wast:144
assert_unlinkable($$15);

// imports.wast:149
let $$16 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x8d\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x04\x66\x75\x6e\x63\x00\x00");

// imports.wast:148
assert_unlinkable($$16);

// imports.wast:153
let $$17 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x08\x66\x75\x6e\x63\x2d\x69\x33\x32\x00\x00");

// imports.wast:152
assert_unlinkable($$17);

// imports.wast:157
let $$18 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x08\x66\x75\x6e\x63\x2d\x69\x33\x32\x00\x00");

// imports.wast:156
assert_unlinkable($$18);

// imports.wast:161
let $$19 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7d\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x08\x66\x75\x6e\x63\x2d\x69\x33\x32\x00\x00");

// imports.wast:160
assert_unlinkable($$19);

// imports.wast:165
let $$20 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7e\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x08\x66\x75\x6e\x63\x2d\x69\x33\x32\x00\x00");

// imports.wast:164
assert_unlinkable($$20);

// imports.wast:169
let $$21 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x08\x66\x75\x6e\x63\x2d\x69\x33\x32\x00\x00");

// imports.wast:168
assert_unlinkable($$21);

// imports.wast:173
let $$22 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x09\x66\x75\x6e\x63\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:172
assert_unlinkable($$22);

// imports.wast:177
let $$23 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7f\x00\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x09\x66\x75\x6e\x63\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:176
assert_unlinkable($$23);

// imports.wast:181
let $$24 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7d\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x09\x66\x75\x6e\x63\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:180
assert_unlinkable($$24);

// imports.wast:185
let $$25 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7e\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x09\x66\x75\x6e\x63\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:184
assert_unlinkable($$25);

// imports.wast:189
let $$26 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x09\x66\x75\x6e\x63\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:188
assert_unlinkable($$26);

// imports.wast:193
let $$27 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0d\x66\x75\x6e\x63\x2d\x69\x33\x32\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:192
assert_unlinkable($$27);

// imports.wast:197
let $$28 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7f\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0d\x66\x75\x6e\x63\x2d\x69\x33\x32\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:196
assert_unlinkable($$28);

// imports.wast:201
let $$29 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0d\x66\x75\x6e\x63\x2d\x69\x33\x32\x2d\x3e\x69\x33\x32\x00\x00");

// imports.wast:200
assert_unlinkable($$29);

// imports.wast:206
let $$30 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x93\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x00\x00");

// imports.wast:205
assert_unlinkable($$30);

// imports.wast:210
let $$31 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x95\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x69\x6e\x66\x00\x00");

// imports.wast:209
assert_unlinkable($$31);

// imports.wast:214
let $$32 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x95\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x6d\x65\x6d\x6f\x72\x79\x2d\x32\x2d\x69\x6e\x66\x00\x00");

// imports.wast:213
assert_unlinkable($$32);

// imports.wast:218
let $$33 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x8c\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x03\x74\x61\x67\x00\x00");

// imports.wast:217
assert_unlinkable($$33);

// imports.wast:222
let $$34 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x97\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x69\x33\x32\x00\x00");

// imports.wast:221
assert_unlinkable($$34);

// imports.wast:226
let $$35 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x92\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x00\x00");

// imports.wast:225
assert_unlinkable($$35);

// imports.wast:230
let $$36 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x93\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x00\x00");

// imports.wast:229
assert_unlinkable($$36);

// imports.wast:235
let $$37 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x04\x00\x00");

// imports.wast:234
assert_unlinkable($$37);

// imports.wast:239
let $$38 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7d\x00\x02\x8d\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x03\x74\x61\x67\x04\x00\x00");

// imports.wast:238
assert_unlinkable($$38);

// imports.wast:243
let $$39 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x07\x74\x61\x67\x2d\x69\x33\x32\x04\x00\x00");

// imports.wast:242
assert_unlinkable($$39);

// imports.wast:247
let $$40 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7d\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x07\x74\x61\x67\x2d\x69\x33\x32\x04\x00\x00");

// imports.wast:246
assert_unlinkable($$40);

// imports.wast:251
let $$41 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7d\x00\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x08\x66\x75\x6e\x63\x2d\x69\x33\x32\x04\x00\x00");

// imports.wast:250
assert_unlinkable($$41);

// imports.wast:258
let $$42 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x91\x80\x80\x80\x00\x04\x60\x00\x01\x7f\x60\x00\x01\x7e\x60\x00\x01\x7d\x60\x00\x01\x7c\x02\xa2\x81\x80\x80\x00\x07\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x69\x33\x32\x03\x7f\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x69\x33\x32\x03\x7f\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x69\x33\x32\x03\x7f\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x69\x33\x32\x03\x7f\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x69\x36\x34\x03\x7e\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x66\x33\x32\x03\x7d\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x66\x36\x34\x03\x7c\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x01\x02\x03\x07\xb9\x80\x80\x80\x00\x07\x05\x67\x65\x74\x2d\x30\x00\x00\x05\x67\x65\x74\x2d\x31\x00\x01\x05\x67\x65\x74\x2d\x78\x00\x02\x05\x67\x65\x74\x2d\x79\x00\x03\x05\x67\x65\x74\x2d\x34\x00\x04\x05\x67\x65\x74\x2d\x35\x00\x05\x05\x67\x65\x74\x2d\x36\x00\x06\x0a\xc0\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x23\x00\x0b\x84\x80\x80\x80\x00\x00\x23\x01\x0b\x84\x80\x80\x80\x00\x00\x23\x02\x0b\x84\x80\x80\x80\x00\x00\x23\x03\x0b\x84\x80\x80\x80\x00\x00\x23\x04\x0b\x84\x80\x80\x80\x00\x00\x23\x05\x0b\x84\x80\x80\x80\x00\x00\x23\x06\x0b");

// imports.wast:258
let $12 = instance($$42);

// imports.wast:278
assert_return(() => call($12, "get-0", []), 666);

// imports.wast:279
assert_return(() => call($12, "get-1", []), 666);

// imports.wast:280
assert_return(() => call($12, "get-x", []), 666);

// imports.wast:281
assert_return(() => call($12, "get-y", []), 666);

// imports.wast:282
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7e\x02\xb5\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x05\x67\x65\x74\x2d\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x02\x40\x10\x00\x01\x42\x9a\x05\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b"), exports($12)),  "run", []));  // assert_return(() => call($12, "get-4", []), int64("666"))

// imports.wast:283
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb5\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x05\x67\x65\x74\x2d\x35\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x66\xa6\x26\x44\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b"), exports($12)),  "run", []));  // assert_return(() => call($12, "get-5", []), 666.599975586)

// imports.wast:284
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb5\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x05\x67\x65\x74\x2d\x36\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\xcd\xcc\xcc\xcc\xcc\xd4\x84\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b"), exports($12)),  "run", []));  // assert_return(() => call($12, "get-6", []), 666.6)

// imports.wast:286
let $$43 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x03\x7f\x00");

// imports.wast:286
let $13 = instance($$43);

// imports.wast:287
let $$44 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x66\x33\x32\x03\x7d\x00");

// imports.wast:287
let $14 = instance($$44);

// imports.wast:288
let $$45 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0e\x67\x6c\x6f\x62\x61\x6c\x2d\x6d\x75\x74\x2d\x69\x36\x34\x03\x7e\x01");

// imports.wast:288
let $15 = instance($$45);

// imports.wast:291
let $$46 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x03\x7f\x00");

// imports.wast:290
assert_unlinkable($$46);

// imports.wast:295
let $$47 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x03\x7f\x00");

// imports.wast:294
assert_unlinkable($$47);

// imports.wast:300
let $$48 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x03\x7e\x00");

// imports.wast:299
assert_unlinkable($$48);

// imports.wast:304
let $$49 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x03\x7d\x00");

// imports.wast:303
assert_unlinkable($$49);

// imports.wast:308
let $$50 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x03\x7c\x00");

// imports.wast:307
assert_unlinkable($$50);

// imports.wast:312
let $$51 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x03\x7f\x01");

// imports.wast:311
assert_unlinkable($$51);

// imports.wast:316
let $$52 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x66\x33\x32\x03\x7f\x00");

// imports.wast:315
assert_unlinkable($$52);

// imports.wast:320
let $$53 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x66\x33\x32\x03\x7e\x00");

// imports.wast:319
assert_unlinkable($$53);

// imports.wast:324
let $$54 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x66\x33\x32\x03\x7c\x00");

// imports.wast:323
assert_unlinkable($$54);

// imports.wast:328
let $$55 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x66\x33\x32\x03\x7d\x01");

// imports.wast:327
assert_unlinkable($$55);

// imports.wast:332
let $$56 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0e\x67\x6c\x6f\x62\x61\x6c\x2d\x6d\x75\x74\x2d\x69\x36\x34\x03\x7f\x01");

// imports.wast:331
assert_unlinkable($$56);

// imports.wast:336
let $$57 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0e\x67\x6c\x6f\x62\x61\x6c\x2d\x6d\x75\x74\x2d\x69\x36\x34\x03\x7d\x01");

// imports.wast:335
assert_unlinkable($$57);

// imports.wast:340
let $$58 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0e\x67\x6c\x6f\x62\x61\x6c\x2d\x6d\x75\x74\x2d\x69\x36\x34\x03\x7c\x01");

// imports.wast:339
assert_unlinkable($$58);

// imports.wast:344
let $$59 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0e\x67\x6c\x6f\x62\x61\x6c\x2d\x6d\x75\x74\x2d\x69\x36\x34\x03\x7e\x00");

// imports.wast:343
assert_unlinkable($$59);

// imports.wast:349
let $$60 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x8e\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x04\x66\x75\x6e\x63\x03\x7f\x00");

// imports.wast:348
assert_unlinkable($$60);

// imports.wast:353
let $$61 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x69\x6e\x66\x03\x7f\x00");

// imports.wast:352
assert_unlinkable($$61);

// imports.wast:357
let $$62 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x6d\x65\x6d\x6f\x72\x79\x2d\x32\x2d\x69\x6e\x66\x03\x7f\x00");

// imports.wast:356
assert_unlinkable($$62);

// imports.wast:361
let $$63 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x03\x7f\x00");

// imports.wast:360
assert_unlinkable($$63);

// imports.wast:365
let $$64 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x93\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x03\x7f\x00");

// imports.wast:364
assert_unlinkable($$64);

// imports.wast:369
let $$65 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x03\x7f\x00");

// imports.wast:368
assert_unlinkable($$65);

// imports.wast:376
let $$66 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x0a\x14\x03\x84\x80\x80\x80\x00\x03\x01\x00\x00\x07\x88\x80\x80\x80\x00\x01\x04\x63\x61\x6c\x6c\x00\x00\x09\x88\x80\x80\x80\x00\x01\x00\x41\x01\x0b\x02\x01\x02\x0a\x9f\x80\x80\x80\x00\x03\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x16\x0b");

// imports.wast:376
let $16 = instance($$66);

// imports.wast:388
assert_trap(() => call($16, "call", [0]));

// imports.wast:389
assert_return(() => call($16, "call", [1]), 11);

// imports.wast:390
assert_return(() => call($16, "call", [2]), 22);

// imports.wast:391
assert_trap(() => call($16, "call", [3]));

// imports.wast:392
assert_trap(() => call($16, "call", [100]));

// imports.wast:395
let $$67 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x0a\x14\x03\x84\x80\x80\x80\x00\x03\x01\x00\x00\x07\x88\x80\x80\x80\x00\x01\x04\x63\x61\x6c\x6c\x00\x00\x09\x88\x80\x80\x80\x00\x01\x00\x41\x01\x0b\x02\x01\x02\x0a\x9f\x80\x80\x80\x00\x03\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x16\x0b");

// imports.wast:395
let $17 = instance($$67);

// imports.wast:407
assert_trap(() => call($17, "call", [0]));

// imports.wast:408
assert_return(() => call($17, "call", [1]), 11);

// imports.wast:409
assert_return(() => call($17, "call", [2]), 22);

// imports.wast:410
assert_trap(() => call($17, "call", [3]));

// imports.wast:411
assert_trap(() => call($17, "call", [100]));

// imports.wast:413
let $$68 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\xa7\x80\x80\x80\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x00\x04\x87\x80\x80\x80\x00\x02\x70\x00\x0a\x70\x00\x0a");

// imports.wast:413
let $18 = instance($$68);

// imports.wast:420
let $$69 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x69\x6e\x66\x01\x70\x00\x0a");

// imports.wast:420
let $19 = instance($$69);

// imports.wast:421
let $$70 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x69\x6e\x66\x01\x70\x00\x05");

// imports.wast:421
let $20 = instance($$70);

// imports.wast:422
let $$71 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x69\x6e\x66\x01\x70\x00\x00");

// imports.wast:422
let $21 = instance($$71);

// imports.wast:423
let $$72 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x00\x0a");

// imports.wast:423
let $22 = instance($$72);

// imports.wast:424
let $$73 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x00\x05");

// imports.wast:424
let $23 = instance($$73);

// imports.wast:425
let $$74 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x00\x00");

// imports.wast:425
let $24 = instance($$74);

// imports.wast:426
let $$75 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x01\x0a\x14");

// imports.wast:426
let $25 = instance($$75);

// imports.wast:427
let $$76 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x01\x05\x14");

// imports.wast:427
let $26 = instance($$76);

// imports.wast:428
let $$77 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x01\x00\x14");

// imports.wast:428
let $27 = instance($$77);

// imports.wast:429
let $$78 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x01\x0a\x19");

// imports.wast:429
let $28 = instance($$78);

// imports.wast:430
let $$79 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x01\x05\x19");

// imports.wast:430
let $29 = instance($$79);

// imports.wast:431
let $$80 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x01\x00\x19");

// imports.wast:431
let $30 = instance($$80);

// imports.wast:432
let $$81 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0a");

// imports.wast:432
let $31 = instance($$81);

// imports.wast:433
let $$82 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x05");

// imports.wast:433
let $32 = instance($$82);

// imports.wast:434
let $$83 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x00");

// imports.wast:434
let $33 = instance($$83);

// imports.wast:435
let $$84 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x0a\x14");

// imports.wast:435
let $34 = instance($$84);

// imports.wast:436
let $$85 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x05\x14");

// imports.wast:436
let $35 = instance($$85);

// imports.wast:437
let $$86 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x00\x14");

// imports.wast:437
let $36 = instance($$86);

// imports.wast:438
let $$87 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x0a\x19");

// imports.wast:438
let $37 = instance($$87);

// imports.wast:439
let $$88 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x05\x19");

// imports.wast:439
let $38 = instance($$88);

// imports.wast:442
let $$89 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x01\x70\x00\x0a");

// imports.wast:441
assert_unlinkable($$89);

// imports.wast:446
let $$90 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x01\x70\x00\x0a");

// imports.wast:445
assert_unlinkable($$90);

// imports.wast:451
let $$91 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x69\x6e\x66\x01\x70\x00\x0c");

// imports.wast:450
assert_unlinkable($$91);

// imports.wast:455
let $$92 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x69\x6e\x66\x01\x70\x01\x0a\x14");

// imports.wast:454
assert_unlinkable($$92);

// imports.wast:459
let $$93 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x01\x0c\x14");

// imports.wast:458
assert_unlinkable($$93);

// imports.wast:463
let $$94 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0b\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x32\x30\x01\x70\x01\x0a\x12");

// imports.wast:462
assert_unlinkable($$94);

// imports.wast:467
let $$95 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0c");

// imports.wast:466
assert_unlinkable($$95);

// imports.wast:471
let $$96 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x0a\x0f");

// imports.wast:470
assert_unlinkable($$96);

// imports.wast:476
let $$97 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x8f\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x04\x66\x75\x6e\x63\x01\x70\x00\x0a");

// imports.wast:475
assert_unlinkable($$97);

// imports.wast:480
let $$98 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x01\x70\x00\x0a");

// imports.wast:479
assert_unlinkable($$98);

// imports.wast:484
let $$99 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x6d\x65\x6d\x6f\x72\x79\x2d\x32\x2d\x69\x6e\x66\x01\x70\x00\x0a");

// imports.wast:483
assert_unlinkable($$99);

// imports.wast:488
let $$100 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x01\x70\x00\x0a");

// imports.wast:487
assert_unlinkable($$100);

// imports.wast:496
let $$101 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x01\x01\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x6c\x6f\x61\x64\x00\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x20\x00\x28\x02\x00\x0b\x0b\x87\x80\x80\x80\x00\x01\x00\x41\x0a\x0b\x01\x10");

// imports.wast:496
let $39 = instance($$101);

// imports.wast:503
assert_return(() => call($39, "load", [0]), 0);

// imports.wast:504
assert_return(() => call($39, "load", [10]), 16);

// imports.wast:505
assert_return(() => call($39, "load", [8]), 1_048_576);

// imports.wast:506
assert_trap(() => call($39, "load", [1_000_000]));

// imports.wast:508
let $$102 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x01\x01\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x6c\x6f\x61\x64\x00\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x20\x00\x28\x02\x00\x0b\x0b\x87\x80\x80\x80\x00\x01\x00\x41\x0a\x0b\x01\x10");

// imports.wast:508
let $40 = instance($$102);

// imports.wast:514
assert_return(() => call($40, "load", [0]), 0);

// imports.wast:515
assert_return(() => call($40, "load", [10]), 16);

// imports.wast:516
assert_return(() => call($40, "load", [8]), 1_048_576);

// imports.wast:517
assert_trap(() => call($40, "load", [1_000_000]));

// imports.wast:519
let $$103 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x6d\x65\x6d\x6f\x72\x79\x2d\x32\x2d\x69\x6e\x66\x02\x00\x02");

// imports.wast:519
let $41 = instance($$103);

// imports.wast:520
let $$104 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x6d\x65\x6d\x6f\x72\x79\x2d\x32\x2d\x69\x6e\x66\x02\x00\x01");

// imports.wast:520
let $42 = instance($$104);

// imports.wast:521
let $$105 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x6d\x65\x6d\x6f\x72\x79\x2d\x32\x2d\x69\x6e\x66\x02\x00\x00");

// imports.wast:521
let $43 = instance($$105);

// imports.wast:522
let $$106 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x01");

// imports.wast:522
let $44 = instance($$106);

// imports.wast:523
let $$107 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x00");

// imports.wast:523
let $45 = instance($$107);

// imports.wast:524
let $$108 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x01\x01\x02");

// imports.wast:524
let $46 = instance($$108);

// imports.wast:525
let $$109 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x01\x00\x02");

// imports.wast:525
let $47 = instance($$109);

// imports.wast:526
let $$110 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x01\x01\x03");

// imports.wast:526
let $48 = instance($$110);

// imports.wast:527
let $$111 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x01\x00\x03");

// imports.wast:527
let $49 = instance($$111);

// imports.wast:530
let $$112 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x91\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x02\x00\x01");

// imports.wast:529
assert_unlinkable($$112);

// imports.wast:534
let $$113 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x02\x00\x01");

// imports.wast:533
assert_unlinkable($$113);

// imports.wast:539
let $$114 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x6d\x65\x6d\x6f\x72\x79\x2d\x32\x2d\x69\x6e\x66\x02\x00\x03");

// imports.wast:538
assert_unlinkable($$114);

// imports.wast:543
let $$115 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x6d\x65\x6d\x6f\x72\x79\x2d\x32\x2d\x69\x6e\x66\x02\x01\x02\x03");

// imports.wast:542
assert_unlinkable($$115);

// imports.wast:547
let $$116 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x02");

// imports.wast:546
assert_unlinkable($$116);

// imports.wast:551
let $$117 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x01\x01\x01");

// imports.wast:550
assert_unlinkable($$117);

// imports.wast:556
let $$118 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x92\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x08\x66\x75\x6e\x63\x2d\x69\x33\x32\x02\x00\x01");

// imports.wast:555
assert_unlinkable($$118);

// imports.wast:560
let $$119 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x02\x00\x01");

// imports.wast:559
assert_unlinkable($$119);

// imports.wast:564
let $$120 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0c\x74\x61\x62\x6c\x65\x2d\x31\x30\x2d\x69\x6e\x66\x02\x00\x01");

// imports.wast:563
assert_unlinkable($$120);

// imports.wast:568
let $$121 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x02\x00\x01");

// imports.wast:567
assert_unlinkable($$121);

// imports.wast:572
let $$122 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x69\x33\x32\x02\x00\x01");

// imports.wast:571
assert_unlinkable($$122);

// imports.wast:576
let $$123 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x93\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x02\x00\x01");

// imports.wast:575
assert_unlinkable($$123);

// imports.wast:581
let $$124 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x02");

// imports.wast:580
assert_unlinkable($$124);

// imports.wast:585
let $$125 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x01\x01\x01");

// imports.wast:584
assert_unlinkable($$125);

// imports.wast:589
let $$126 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x6d\x65\x6d\x6f\x72\x79\x02\x01\x00\x03\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x67\x72\x6f\x77\x00\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x20\x00\x40\x00\x0b");

// imports.wast:589
let $50 = instance($$126);

// imports.wast:593
assert_return(() => call($50, "grow", [0]), 1);

// imports.wast:594
assert_return(() => call($50, "grow", [1]), 1);

// imports.wast:595
assert_return(() => call($50, "grow", [0]), 2);

// imports.wast:596
assert_return(() => call($50, "grow", [1]), -1);

// imports.wast:597
assert_return(() => call($50, "grow", [0]), 2);

// imports.wast:602
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:606
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:610
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:614
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:619
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:623
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:627
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:631
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:636
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:640
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:644
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:648
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:653
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:657
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:661
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:665
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// imports.wast:673
let $$127 = module("\x00\x61\x73\x6d\x01\x00\x00\x00");

// imports.wast:673
let $51 = instance($$127);

// imports.wast:674
register("not wasm", $51)

// imports.wast:676
let $$128 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa9\x80\x80\x80\x00\x0a\x60\x00\x00\x60\x01\x7f\x00\x60\x02\x7f\x7f\x00\x60\x01\x7e\x00\x60\x01\x7d\x00\x60\x01\x7c\x00\x60\x00\x01\x7f\x60\x00\x01\x7e\x60\x00\x01\x7d\x60\x00\x01\x7c\x02\xe8\x82\x80\x80\x00\x10\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x00\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x01\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x02\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x03\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x04\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x05\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x06\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x07\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x08\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x00\x09\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x03\x7f\x00\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x03\x7e\x00\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x03\x7d\x00\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x03\x7c\x00\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x01\x70\x00\x00\x08\x6e\x6f\x74\x20\x77\x61\x73\x6d\x0a\x6f\x76\x65\x72\x6c\x6f\x61\x64\x65\x64\x02\x00\x00");

// imports.wast:675
assert_unlinkable($$128);
