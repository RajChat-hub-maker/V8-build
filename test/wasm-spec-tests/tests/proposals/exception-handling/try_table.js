
'use strict';

let externrefs = {};
let externsym = Symbol("externref");
function externref(s) {
  if (! (s in externrefs)) externrefs[s] = {[externsym]: s};
  return externrefs[s];
}
function is_externref(x) {
  return (x !== null && externsym in x) ? 1 : 0;
}
function is_funcref(x) {
  return typeof x === "function" ? 1 : 0;
}
function eq_externref(x, y) {
  return x === y ? 1 : 0;
}
function eq_funcref(x, y) {
  return x === y ? 1 : 0;
}

let spectest = {
  externref: externref,
  is_externref: is_externref,
  is_funcref: is_funcref,
  eq_externref: eq_externref,
  eq_funcref: eq_funcref,
  print: console.log.bind(console),
  print_i32: console.log.bind(console),
  print_i64: console.log.bind(console),
  print_i32_f32: console.log.bind(console),
  print_f64_f64: console.log.bind(console),
  print_f32: console.log.bind(console),
  print_f64: console.log.bind(console),
  global_i32: 666,
  global_i64: 666n,
  global_f32: 666,
  global_f64: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2})
};

let handler = {
  get(target, prop) {
    return (prop in target) ?  target[prop] : {};
  }
};
let registry = new Proxy({spectest}, handler);

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  let validated;
  try {
    validated = WebAssembly.validate(buffer);
  } catch (e) {
    throw new Error("Wasm validate throws");
  }
  if (validated !== valid) {
    throw new Error("Wasm validate failure" + (valid ? "" : " expected"));
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function call(instance, name, args) {
  return instance.exports[name](...args);
}

function get(instance, name) {
  let v = instance.exports[name];
  return (v instanceof WebAssembly.Global) ? v.value : v;
}

function exports(instance) {
  return {module: instance.exports, spectest: spectest};
}

function run(action) {
  action();
}

function assert_malformed(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.LinkError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_exception(action) {
  try { action() } catch (e) { return; }
  throw new Error("exception expected");
}

let StackOverflow;
try { (function f() { 1 + f() })() } catch (e) { StackOverflow = e.constructor }

function assert_exhaustion(action) {
  try { action() } catch (e) {
    if (e instanceof StackOverflow) return;
  }
  throw new Error("Wasm resource exhaustion expected");
}

function assert_return(action, ...expected) {
  let actual = action();
  if (actual === undefined) {
    actual = [];
  } else if (!Array.isArray(actual)) {
    actual = [actual];
  }
  if (actual.length !== expected.length) {
    throw new Error(expected.length + " value(s) expected, got " + actual.length);
  }
  for (let i = 0; i < actual.length; ++i) {
    switch (expected[i]) {
      case "nan:canonical":
      case "nan:arithmetic":
      case "nan:any":
        // Note that JS can't reliably distinguish different NaN values,
        // so there's no good way to test that it's a canonical NaN.
        if (!Number.isNaN(actual[i])) {
          throw new Error("Wasm return value NaN expected, got " + actual[i]);
        };
        return;
      case "ref.func":
        if (typeof actual[i] !== "function") {
          throw new Error("Wasm function return value expected, got " + actual[i]);
        };
        return;
      case "ref.extern":
        if (actual[i] === null) {
          throw new Error("Wasm reference return value expected, got " + actual[i]);
        };
        return;
      default:
        if (!Object.is(actual[i], expected[i])) {
          throw new Error("Wasm return value " + expected[i] + " expected, got " + actual[i]);
        };
    }
  }
}

// try_table.wast:3
let $1 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0d\x83\x80\x80\x80\x00\x01\x00\x00\x07\x8e\x80\x80\x80\x00\x02\x02\x65\x30\x04\x00\x05\x74\x68\x72\x6f\x77\x00\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x08\x00\x0b");

// try_table.wast:8
register("test", $1)

// try_table.wast:10
let $2 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xc6\x80\x80\x80\x00\x0f\x60\x00\x00\x60\x01\x7f\x00\x60\x01\x7d\x00\x60\x01\x7e\x00\x60\x01\x7c\x00\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x01\x7f\x60\x01\x7d\x01\x7d\x60\x01\x7e\x01\x7e\x60\x01\x7c\x01\x7c\x60\x00\x02\x7f\x69\x60\x00\x02\x7d\x69\x60\x00\x02\x7e\x69\x60\x00\x02\x7c\x69\x60\x00\x01\x7f\x02\xa4\x80\x80\x80\x00\x03\x04\x74\x65\x73\x74\x02\x65\x30\x04\x00\x00\x04\x74\x65\x73\x74\x02\x65\x30\x04\x00\x00\x04\x74\x65\x73\x74\x05\x74\x68\x72\x6f\x77\x00\x00\x03\x99\x80\x80\x80\x00\x18\x05\x05\x00\x06\x06\x05\x05\x05\x07\x08\x09\x05\x07\x08\x09\x01\x05\x0e\x0e\x05\x00\x00\x00\x00\x04\x85\x80\x80\x80\x00\x01\x70\x01\x01\x01\x0d\x8f\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x07\xce\x83\x80\x80\x00\x14\x12\x73\x69\x6d\x70\x6c\x65\x2d\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x00\x02\x16\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x2d\x6e\x6f\x74\x2d\x63\x61\x75\x67\x68\x74\x00\x03\x0e\x74\x72\x61\x70\x2d\x69\x6e\x2d\x63\x61\x6c\x6c\x65\x65\x00\x05\x0f\x63\x61\x74\x63\x68\x2d\x63\x6f\x6d\x70\x6c\x65\x78\x2d\x31\x00\x06\x0f\x63\x61\x74\x63\x68\x2d\x63\x6f\x6d\x70\x6c\x65\x78\x2d\x32\x00\x07\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x69\x33\x32\x00\x08\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x66\x33\x32\x00\x09\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x69\x36\x34\x00\x0a\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x66\x36\x34\x00\x0b\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x69\x33\x32\x00\x0c\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x66\x33\x32\x00\x0d\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x69\x36\x34\x00\x0e\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x66\x36\x34\x00\x0f\x0f\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x69\x33\x32\x00\x11\x0e\x63\x61\x74\x63\x68\x2d\x69\x6d\x70\x6f\x72\x74\x65\x64\x00\x12\x14\x63\x61\x74\x63\x68\x2d\x69\x6d\x70\x6f\x72\x74\x65\x64\x2d\x61\x6c\x69\x61\x73\x00\x13\x0d\x63\x61\x74\x63\x68\x6c\x65\x73\x73\x2d\x74\x72\x79\x00\x14\x18\x72\x65\x74\x75\x72\x6e\x2d\x63\x61\x6c\x6c\x2d\x69\x6e\x2d\x74\x72\x79\x2d\x63\x61\x74\x63\x68\x00\x16\x21\x72\x65\x74\x75\x72\x6e\x2d\x63\x61\x6c\x6c\x2d\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x69\x6e\x2d\x74\x72\x79\x2d\x63\x61\x74\x63\x68\x00\x17\x0e\x74\x72\x79\x2d\x77\x69\x74\x68\x2d\x70\x61\x72\x61\x6d\x00\x18\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x15\x0a\xe7\x84\x80\x80\x00\x18\x8e\x80\x80\x80\x00\x00\x20\x00\x41\x00\x47\x04\x40\x08\x02\x0b\x41\x00\x0b\x99\x80\x80\x80\x00\x00\x02\x40\x1f\x7f\x01\x00\x02\x00\x20\x00\x45\x04\x40\x08\x02\x0b\x41\x2a\x0b\x0f\x0b\x41\x17\x0b\x8d\x80\x80\x80\x00\x00\x02\x40\x1f\x40\x01\x02\x00\x00\x0b\x0f\x0b\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x20\x01\x6e\x0b\x94\x80\x80\x80\x00\x00\x02\x40\x1f\x7f\x01\x02\x00\x20\x00\x20\x01\x10\x04\x0b\x0f\x0b\x41\x0b\x0b\xb5\x80\x80\x80\x00\x00\x02\x40\x1f\x7f\x01\x00\x03\x00\x02\x40\x1f\x7f\x01\x00\x02\x00\x20\x00\x45\x04\x40\x08\x02\x05\x20\x00\x41\x01\x46\x04\x40\x08\x03\x05\x08\x04\x0b\x0b\x41\x02\x0b\x0c\x01\x0b\x41\x03\x0b\x0f\x0b\x41\x04\x0b\xb0\x80\x80\x80\x00\x00\x02\x40\x02\x40\x1f\x7f\x02\x00\x02\x01\x00\x03\x00\x20\x00\x45\x04\x40\x08\x02\x05\x20\x00\x41\x01\x46\x04\x40\x08\x03\x05\x08\x04\x0b\x0b\x41\x02\x0b\x0f\x0b\x41\x04\x0f\x0b\x41\x03\x0b\x94\x80\x80\x80\x00\x00\x02\x7f\x1f\x7f\x01\x00\x05\x00\x20\x00\x08\x05\x41\x02\x0b\x0f\x0b\x0f\x0b\x97\x80\x80\x80\x00\x00\x02\x7d\x1f\x7d\x01\x00\x06\x00\x20\x00\x08\x06\x43\x00\x00\x00\x00\x0b\x0f\x0b\x0f\x0b\x94\x80\x80\x80\x00\x00\x02\x7e\x1f\x7e\x01\x00\x07\x00\x20\x00\x08\x07\x42\x02\x0b\x0f\x0b\x0f\x0b\x9b\x80\x80\x80\x00\x00\x02\x7c\x1f\x7c\x01\x00\x08\x00\x20\x00\x08\x08\x44\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x0f\x0b\x0f\x0b\x95\x80\x80\x80\x00\x00\x02\x0a\x1f\x7f\x01\x01\x05\x00\x20\x00\x08\x05\x41\x02\x0b\x0f\x0b\x1a\x0f\x0b\x98\x80\x80\x80\x00\x00\x02\x0b\x1f\x7d\x01\x01\x06\x00\x20\x00\x08\x06\x43\x00\x00\x00\x00\x0b\x0f\x0b\x1a\x0f\x0b\x95\x80\x80\x80\x00\x00\x02\x0c\x1f\x7e\x01\x01\x07\x00\x20\x00\x08\x07\x42\x02\x0b\x0f\x0b\x1a\x0f\x0b\x9c\x80\x80\x80\x00\x00\x02\x0d\x1f\x7c\x01\x01\x08\x00\x20\x00\x08\x08\x44\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x0f\x0b\x1a\x0f\x0b\x86\x80\x80\x80\x00\x00\x20\x00\x08\x05\x0b\x93\x80\x80\x80\x00\x00\x02\x7f\x1f\x7f\x01\x00\x05\x00\x41\x00\x20\x00\x10\x10\x0b\x0f\x0b\x0b\x93\x80\x80\x80\x00\x00\x02\x40\x1f\x7f\x01\x00\x00\x00\x41\x01\x10\x00\x0b\x0f\x0b\x41\x02\x0b\x93\x80\x80\x80\x00\x00\x02\x40\x1f\x7f\x01\x00\x00\x00\x41\x01\x08\x01\x0b\x0f\x0b\x41\x02\x0b\x97\x80\x80\x80\x00\x00\x02\x40\x1f\x7f\x01\x00\x02\x00\x1f\x7f\x00\x20\x00\x10\x01\x0b\x0b\x0f\x0b\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x08\x02\x0b\x8e\x80\x80\x80\x00\x00\x02\x40\x1f\x40\x01\x00\x02\x00\x12\x15\x0b\x0b\x0b\x91\x80\x80\x80\x00\x00\x02\x40\x1f\x40\x01\x00\x02\x00\x41\x00\x13\x00\x00\x0b\x0b\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x1f\x01\x00\x1a\x0b\x0b");

// try_table.wast:258
assert_return(() => call($2, "simple-throw-catch", [0]), 23);

// try_table.wast:259
assert_return(() => call($2, "simple-throw-catch", [1]), 42);

// try_table.wast:261
assert_trap(() => call($2, "unreachable-not-caught", []));

// try_table.wast:263
assert_return(() => call($2, "trap-in-callee", [7, 2]), 3);

// try_table.wast:264
assert_trap(() => call($2, "trap-in-callee", [1, 0]));

// try_table.wast:266
assert_return(() => call($2, "catch-complex-1", [0]), 3);

// try_table.wast:267
assert_return(() => call($2, "catch-complex-1", [1]), 4);

// try_table.wast:268
assert_exception(() => call($2, "catch-complex-1", [2]));

// try_table.wast:270
assert_return(() => call($2, "catch-complex-2", [0]), 3);

// try_table.wast:271
assert_return(() => call($2, "catch-complex-2", [1]), 4);

// try_table.wast:272
assert_exception(() => call($2, "catch-complex-2", [2]));

// try_table.wast:274
assert_return(() => call($2, "throw-catch-param-i32", [0]), 0);

// try_table.wast:275
assert_return(() => call($2, "throw-catch-param-i32", [1]), 1);

// try_table.wast:276
assert_return(() => call($2, "throw-catch-param-i32", [10]), 10);

// try_table.wast:278
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7d\x01\x7d\x02\x91\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x66\x33\x32\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x9f\x80\x80\x80\x00\x01\x99\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\xa0\x40\x10\x00\xbc\x43\x00\x00\xa0\x40\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch-param-f32", [5.]), 5.)

// try_table.wast:279
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7d\x01\x7d\x02\x91\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x66\x33\x32\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x9f\x80\x80\x80\x00\x01\x99\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\x28\x41\x10\x00\xbc\x43\x00\x00\x28\x41\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch-param-f32", [10.5]), 10.5)

// try_table.wast:281
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7e\x01\x7e\x02\x91\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x69\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x99\x80\x80\x80\x00\x01\x93\x80\x80\x80\x00\x00\x02\x40\x42\x05\x10\x00\x01\x42\x05\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch-param-i64", [int64("5")]), int64("5"))

// try_table.wast:282
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7e\x01\x7e\x02\x91\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x69\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x99\x80\x80\x80\x00\x01\x93\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\x01\x42\x00\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch-param-i64", [int64("0")]), int64("0"))

// try_table.wast:283
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7e\x01\x7e\x02\x91\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x69\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x99\x80\x80\x80\x00\x01\x93\x80\x80\x80\x00\x00\x02\x40\x42\x7f\x10\x00\x01\x42\x7f\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch-param-i64", [int64("-1")]), int64("-1"))

// try_table.wast:285
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7c\x01\x7c\x02\x91\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x66\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\xa7\x80\x80\x80\x00\x01\xa1\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x14\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x14\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch-param-f64", [5.]), 5.)

// try_table.wast:286
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7c\x01\x7c\x02\x91\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x15\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x2d\x70\x61\x72\x61\x6d\x2d\x66\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\xa7\x80\x80\x80\x00\x01\xa1\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x25\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x25\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch-param-f64", [10.5]), 10.5)

// try_table.wast:288
assert_return(() => call($2, "throw-catch_ref-param-i32", [0]), 0);

// try_table.wast:289
assert_return(() => call($2, "throw-catch_ref-param-i32", [1]), 1);

// try_table.wast:290
assert_return(() => call($2, "throw-catch_ref-param-i32", [10]), 10);

// try_table.wast:292
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7d\x01\x7d\x02\x95\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x66\x33\x32\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x9f\x80\x80\x80\x00\x01\x99\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\xa0\x40\x10\x00\xbc\x43\x00\x00\xa0\x40\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch_ref-param-f32", [5.]), 5.)

// try_table.wast:293
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7d\x01\x7d\x02\x95\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x66\x33\x32\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x9f\x80\x80\x80\x00\x01\x99\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\x28\x41\x10\x00\xbc\x43\x00\x00\x28\x41\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch_ref-param-f32", [10.5]), 10.5)

// try_table.wast:295
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7e\x01\x7e\x02\x95\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x69\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x99\x80\x80\x80\x00\x01\x93\x80\x80\x80\x00\x00\x02\x40\x42\x05\x10\x00\x01\x42\x05\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch_ref-param-i64", [int64("5")]), int64("5"))

// try_table.wast:296
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7e\x01\x7e\x02\x95\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x69\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x99\x80\x80\x80\x00\x01\x93\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\x01\x42\x00\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch_ref-param-i64", [int64("0")]), int64("0"))

// try_table.wast:297
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7e\x01\x7e\x02\x95\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x69\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\x99\x80\x80\x80\x00\x01\x93\x80\x80\x80\x00\x00\x02\x40\x42\x7f\x10\x00\x01\x42\x7f\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch_ref-param-i64", [int64("-1")]), int64("-1"))

// try_table.wast:299
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7c\x01\x7c\x02\x95\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x66\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\xa7\x80\x80\x80\x00\x01\xa1\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x14\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x14\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch_ref-param-f64", [5.]), 5.)

// try_table.wast:300
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa4\x80\x80\x80\x00\x07\x60\x00\x00\x60\x01\x7f\x01\x6f\x60\x01\x6f\x01\x7f\x60\x01\x70\x01\x7f\x60\x02\x6f\x6f\x01\x7f\x60\x02\x70\x70\x01\x7f\x60\x01\x7c\x01\x7c\x02\x95\x81\x80\x80\x00\x06\x06\x6d\x6f\x64\x75\x6c\x65\x19\x74\x68\x72\x6f\x77\x2d\x63\x61\x74\x63\x68\x5f\x72\x65\x66\x2d\x70\x61\x72\x61\x6d\x2d\x66\x36\x34\x00\x06\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x69\x73\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x69\x73\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0c\x65\x71\x5f\x65\x78\x74\x65\x72\x6e\x72\x65\x66\x00\x04\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x65\x71\x5f\x66\x75\x6e\x63\x72\x65\x66\x00\x05\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x06\x0a\xa7\x80\x80\x80\x00\x01\xa1\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x25\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x25\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports($2)),  "run", []));  // assert_return(() => call($2, "throw-catch_ref-param-f64", [10.5]), 10.5)

// try_table.wast:302
assert_return(() => call($2, "catch-param-i32", [5]), 5);

// try_table.wast:304
assert_return(() => call($2, "catch-imported", []), 2);

// try_table.wast:305
assert_return(() => call($2, "catch-imported-alias", []), 2);

// try_table.wast:307
assert_return(() => call($2, "catchless-try", [0]), 0);

// try_table.wast:308
assert_return(() => call($2, "catchless-try", [1]), 1);

// try_table.wast:310
assert_exception(() => call($2, "return-call-in-try-catch", []));

// try_table.wast:311
assert_exception(() => call($2, "return-call-indirect-in-try-catch", []));

// try_table.wast:313
assert_return(() => call($2, "try-with-param", []));

// try_table.wast:315
let $3 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x00\x60\x00\x01\x7f\x02\x8e\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x05\x74\x68\x72\x6f\x77\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x0d\x83\x80\x80\x80\x00\x01\x00\x00\x07\x95\x80\x80\x80\x00\x01\x11\x69\x6d\x70\x6f\x72\x74\x65\x64\x2d\x6d\x69\x73\x6d\x61\x74\x63\x68\x00\x01\x0a\xa5\x80\x80\x80\x00\x01\x9f\x80\x80\x80\x00\x00\x02\x40\x1f\x7f\x01\x02\x00\x02\x40\x1f\x7f\x01\x00\x00\x00\x41\x01\x10\x00\x0b\x0f\x0b\x41\x02\x0b\x0f\x0b\x41\x03\x0b");

// try_table.wast:337
assert_return(() => call($3, "imported-mismatch", []), 3);

// try_table.wast:339
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// try_table.wast:344
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// try_table.wast:349
let $4 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x00\x60\x00\x01\x69\x03\x87\x80\x80\x80\x00\x06\x00\x00\x00\x01\x01\x01\x0d\x83\x80\x80\x80\x00\x01\x00\x00\x0a\xe4\x80\x80\x80\x00\x06\x8c\x80\x80\x80\x00\x00\x1f\x40\x02\x00\x00\x00\x00\x00\x00\x0b\x0b\x8b\x80\x80\x80\x00\x00\x1f\x40\x02\x02\x00\x00\x00\x00\x0b\x0b\x8a\x80\x80\x80\x00\x00\x1f\x40\x02\x02\x00\x02\x00\x0b\x0b\x8d\x80\x80\x80\x00\x00\x1f\x40\x02\x01\x00\x00\x01\x00\x00\x0b\x00\x0b\x8c\x80\x80\x80\x00\x00\x1f\x40\x02\x03\x00\x01\x00\x00\x0b\x00\x0b\x8b\x80\x80\x80\x00\x00\x1f\x40\x02\x03\x00\x03\x00\x0b\x00\x0b");

// try_table.wast:359
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x1f\x7f\x00\x0b\x0b");

// try_table.wast:363
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x1f\x7f\x00\x42\x2a\x0b\x0b");

// try_table.wast:368
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0d\x83\x80\x80\x80\x00\x01\x00\x00\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x1f\x40\x01\x01\x00\x00\x0b\x0b");

// try_table.wast:372
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x00\x60\x00\x01\x69\x03\x82\x80\x80\x80\x00\x01\x01\x0d\x83\x80\x80\x80\x00\x01\x00\x00\x0a\x90\x80\x80\x80\x00\x01\x8a\x80\x80\x80\x00\x00\x1f\x40\x01\x00\x00\x00\x0b\x00\x0b");

// try_table.wast:376
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x1f\x40\x01\x03\x00\x0b\x0b");

// try_table.wast:380
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x69\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x1f\x40\x01\x02\x00\x0b\x00\x0b");

// try_table.wast:384
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7e\x00\x60\x00\x02\x7f\x69\x03\x82\x80\x80\x80\x00\x01\x01\x0d\x83\x80\x80\x80\x00\x01\x00\x00\x0a\x91\x80\x80\x80\x00\x01\x8b\x80\x80\x80\x00\x00\x1f\x7f\x01\x01\x00\x00\x41\x2a\x0b\x0b");
