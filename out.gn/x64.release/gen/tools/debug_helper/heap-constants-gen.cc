
#include <cstdint>
#include <string>

#include "src/common/ptr-compr-inl.h"
#include "tools/debug_helper/debug-helper-internal.h"

namespace v8 {
namespace internal {
namespace debug_helper_internal {

std::string FindKnownObjectInMapSpace(uintptr_t offset) {
  switch (offset) {
    default: return "";
  }
}

std::string FindKnownObjectInOldSpace(uintptr_t offset) {
  switch (offset) {
    case 17: return "ExternalMap";
    case 57: return "JSMessageObjectMap";
    case 97: return "EmptyScript";
    case 169: return "ManyClosuresCell";
    case 185: return "ArrayConstructorProtector";
    case 205: return "NoElementsProtector";
    case 225: return "MegaDOMProtector";
    case 245: return "NoProfilingProtector";
    case 265: return "NoUndetectableObjectsProtector";
    case 285: return "IsConcatSpreadableProtector";
    case 305: return "ArraySpeciesProtector";
    case 325: return "TypedArraySpeciesProtector";
    case 345: return "PromiseSpeciesProtector";
    case 365: return "RegExpSpeciesProtector";
    case 385: return "StringLengthProtector";
    case 405: return "ArrayIteratorProtector";
    case 425: return "ArrayBufferDetachingProtector";
    case 445: return "PromiseHookProtector";
    case 465: return "PromiseResolveProtector";
    case 485: return "MapIteratorProtector";
    case 505: return "PromiseThenProtector";
    case 525: return "SetIteratorProtector";
    case 545: return "StringIteratorProtector";
    case 565: return "StringWrapperToPrimitiveProtector";
    case 585: return "NumberStringNotRegexpLikeProtector";
    case 605: return "StringSplitCache";
    case 1637: return "RegExpMultipleCache";
    case 2669: return "RegExpMatchGlobalAtomCache";
    case 2693: return "BuiltinsConstantsTable";
    default: return "";
  }
}

std::string FindKnownObjectInReadOnlySpace(uintptr_t offset) {
  switch (offset) {
    case 229: return "SeqTwoByteStringMap";
    case 269: return "SeqOneByteStringMap";
    case 309: return "SharedSeqTwoByteStringMap";
    case 349: return "SharedSeqOneByteStringMap";
    case 389: return "InternalizedTwoByteStringMap";
    case 429: return "InternalizedOneByteStringMap";
    case 469: return "ExternalInternalizedTwoByteStringMap";
    case 509: return "ExternalInternalizedOneByteStringMap";
    case 549: return "UncachedExternalInternalizedTwoByteStringMap";
    case 589: return "UncachedExternalInternalizedOneByteStringMap";
    case 629: return "UncachedExternalTwoByteStringMap";
    case 669: return "UncachedExternalOneByteStringMap";
    case 709: return "SharedUncachedExternalTwoByteStringMap";
    case 749: return "SharedUncachedExternalOneByteStringMap";
    case 789: return "ExternalTwoByteStringMap";
    case 829: return "ExternalOneByteStringMap";
    case 869: return "SharedExternalTwoByteStringMap";
    case 909: return "SharedExternalOneByteStringMap";
    case 949: return "ConsTwoByteStringMap";
    case 989: return "ConsOneByteStringMap";
    case 1029: return "SlicedTwoByteStringMap";
    case 1069: return "SlicedOneByteStringMap";
    case 1109: return "ThinTwoByteStringMap";
    case 1149: return "ThinOneByteStringMap";
    case 1189: return "SymbolMap";
    case 1229: return "MetaMap";
    case 1269: return "UndefinedMap";
    case 1309: return "NullMap";
    case 1349: return "BooleanMap";
    case 1389: return "HeapNumberMap";
    case 1429: return "BigIntMap";
    case 1469: return "FixedArrayMap";
    case 1509: return "TrustedFixedArrayMap";
    case 1549: return "ProtectedFixedArrayMap";
    case 1589: return "WeakFixedArrayMap";
    case 1629: return "TrustedWeakFixedArrayMap";
    case 1669: return "WeakArrayListMap";
    case 1709: return "FixedCOWArrayMap";
    case 1749: return "DescriptorArrayMap";
    case 1789: return "HoleMap";
    case 1829: return "CallSiteInfoMap";
    case 1869: return "EnumCacheMap";
    case 1977: return "ScopeInfoMap";
    case 2017: return "ModuleInfoMap";
    case 2057: return "ClosureFeedbackCellArrayMap";
    case 2097: return "FeedbackVectorMap";
    case 2137: return "ForeignMap";
    case 2177: return "TrustedForeignMap";
    case 2217: return "MegaDomHandlerMap";
    case 2257: return "FixedDoubleArrayMap";
    case 2297: return "FeedbackMetadataArrayMap";
    case 2337: return "ByteArrayMap";
    case 2377: return "TrustedByteArrayMap";
    case 2417: return "BytecodeArrayMap";
    case 2457: return "FreeSpaceMap";
    case 2497: return "PropertyArrayMap";
    case 2537: return "SmallOrderedHashMapMap";
    case 2577: return "SmallOrderedHashSetMap";
    case 2617: return "SmallOrderedNameDictionaryMap";
    case 2657: return "InstructionStreamMap";
    case 2697: return "CellMap";
    case 2745: return "GlobalPropertyCellMap";
    case 2785: return "OnePointerFillerMap";
    case 2825: return "TwoPointerFillerMap";
    case 2865: return "NoClosuresCellMap";
    case 2905: return "OneClosureCellMap";
    case 2945: return "ManyClosuresCellMap";
    case 2985: return "TransitionArrayMap";
    case 3025: return "HashTableMap";
    case 3065: return "OrderedNameDictionaryMap";
    case 3105: return "NameDictionaryMap";
    case 3145: return "SwissNameDictionaryMap";
    case 3185: return "GlobalDictionaryMap";
    case 3225: return "NumberDictionaryMap";
    case 3265: return "RegisteredSymbolTableMap";
    case 3305: return "ArrayListMap";
    case 3345: return "AccessorInfoMap";
    case 3385: return "PreparseDataMap";
    case 3425: return "SharedFunctionInfoMap";
    case 3465: return "CodeMap";
    case 3965: return "PromiseFulfillReactionJobTaskMap";
    case 4005: return "PromiseRejectReactionJobTaskMap";
    case 4045: return "CallableTaskMap";
    case 4085: return "CallbackTaskMap";
    case 4125: return "PromiseResolveThenableJobTaskMap";
    case 4165: return "AccessCheckInfoMap";
    case 4205: return "AccessorPairMap";
    case 4245: return "AliasedArgumentsEntryMap";
    case 4285: return "AllocationMementoMap";
    case 4325: return "ArrayBoilerplateDescriptionMap";
    case 4365: return "AsmWasmDataMap";
    case 4405: return "AsyncGeneratorRequestMap";
    case 4445: return "BreakPointMap";
    case 4485: return "BreakPointInfoMap";
    case 4525: return "BytecodeWrapperMap";
    case 4565: return "ClassBoilerplateMap";
    case 4605: return "ClassPositionsMap";
    case 4645: return "CodeWrapperMap";
    case 4685: return "DebugInfoMap";
    case 4725: return "ErrorStackDataMap";
    case 4765: return "FunctionTemplateRareDataMap";
    case 4805: return "InterceptorInfoMap";
    case 4845: return "ModuleRequestMap";
    case 4885: return "PromiseCapabilityMap";
    case 4925: return "PromiseReactionMap";
    case 4965: return "PropertyDescriptorObjectMap";
    case 5005: return "PrototypeInfoMap";
    case 5045: return "RegExpBoilerplateDescriptionMap";
    case 5085: return "RegExpDataWrapperMap";
    case 5125: return "ScriptMap";
    case 5165: return "ScriptOrModuleMap";
    case 5205: return "SourceTextModuleInfoEntryMap";
    case 5245: return "StackFrameInfoMap";
    case 5285: return "StackTraceInfoMap";
    case 5325: return "TemplateObjectDescriptionMap";
    case 5365: return "Tuple2Map";
    case 5405: return "WasmExceptionTagMap";
    case 5445: return "AllocationSiteWithWeakNextMap";
    case 5485: return "AllocationSiteWithoutWeakNextMap";
    case 5525: return "LoadHandler1Map";
    case 5565: return "LoadHandler2Map";
    case 5605: return "LoadHandler3Map";
    case 5645: return "StoreHandler0Map";
    case 5685: return "StoreHandler1Map";
    case 5725: return "StoreHandler2Map";
    case 5765: return "StoreHandler3Map";
    case 5805: return "FunctionTemplateInfoMap";
    case 5845: return "UncompiledDataWithoutPreparseDataMap";
    case 5885: return "UncompiledDataWithPreparseDataMap";
    case 5925: return "UncompiledDataWithoutPreparseDataWithJobMap";
    case 5965: return "UncompiledDataWithPreparseDataAndJobMap";
    case 6005: return "OnHeapBasicBlockProfilerDataMap";
    case 6045: return "ObjectTemplateInfoMap";
    case 6085: return "TurbofanBitsetTypeMap";
    case 6125: return "TurbofanUnionTypeMap";
    case 6165: return "TurbofanRangeTypeMap";
    case 6205: return "TurbofanHeapConstantTypeMap";
    case 6245: return "TurbofanOtherNumberConstantTypeMap";
    case 6285: return "TurboshaftWord32TypeMap";
    case 6325: return "TurboshaftWord32RangeTypeMap";
    case 6365: return "TurboshaftWord64TypeMap";
    case 6405: return "TurboshaftWord64RangeTypeMap";
    case 6445: return "TurboshaftFloat64TypeMap";
    case 6485: return "TurboshaftFloat64RangeTypeMap";
    case 6525: return "InternalClassMap";
    case 6565: return "SmiPairMap";
    case 6605: return "SmiBoxMap";
    case 6645: return "ExportedSubClassBaseMap";
    case 6685: return "ExportedSubClassMap";
    case 6725: return "AbstractInternalClassSubclass1Map";
    case 6765: return "AbstractInternalClassSubclass2Map";
    case 6805: return "ExportedSubClass2Map";
    case 6845: return "SortStateMap";
    case 6885: return "WasmFastApiCallDataMap";
    case 6925: return "WasmStringViewIterMap";
    case 6965: return "SloppyArgumentsElementsMap";
    case 7005: return "StrongDescriptorArrayMap";
    case 7045: return "TurboshaftWord32SetTypeMap";
    case 7085: return "TurboshaftWord64SetTypeMap";
    case 7125: return "TurboshaftFloat64SetTypeMap";
    case 7165: return "InternalClassWithStructElementsMap";
    case 7205: return "OrderedHashMapMap";
    case 7245: return "OrderedHashSetMap";
    case 7285: return "SimpleNumberDictionaryMap";
    case 7325: return "NameToIndexHashTableMap";
    case 7365: return "EmbedderDataArrayMap";
    case 7405: return "EphemeronHashTableMap";
    case 7445: return "ScriptContextTableMap";
    case 7485: return "ObjectBoilerplateDescriptionMap";
    case 7525: return "CoverageInfoMap";
    case 7565: return "RegExpMatchInfoMap";
    case 7605: return "RegExpDataMap";
    case 7645: return "AtomRegExpDataMap";
    case 7685: return "IrRegExpDataMap";
    case 7725: return "SourceTextModuleMap";
    case 7765: return "SyntheticModuleMap";
    case 7805: return "GlobalConstTrackingLetCellMap";
    case 7845: return "WasmImportDataMap";
    case 7885: return "WasmCapiFunctionDataMap";
    case 7925: return "WasmExportedFunctionDataMap";
    case 7965: return "WasmInternalFunctionMap";
    case 8005: return "WasmFuncRefMap";
    case 8045: return "WasmJSFunctionDataMap";
    case 8085: return "WasmResumeDataMap";
    case 8125: return "WasmSuspenderObjectMap";
    case 8165: return "WasmTypeInfoMap";
    case 8205: return "WasmContinuationObjectMap";
    case 8245: return "WasmNullMap";
    case 8285: return "WasmTrustedInstanceDataMap";
    case 8325: return "WasmDispatchTableMap";
    case 8365: return "WeakCellMap";
    case 8405: return "InterpreterDataMap";
    case 8445: return "SharedFunctionInfoWrapperMap";
    case 8485: return "DictionaryTemplateInfoMap";
    case 131073: return "JSSharedArrayMap";
    case 131141: return "JSAtomicsMutexMap";
    case 131181: return "JSAtomicsConditionMap";
    case 105: return "UndefinedValue";
    case 133: return "NullValue";
    case 161: return "empty_string";
    case 173: return "FalseValue";
    case 201: return "TrueValue";
    case 1909: return "EmptyFixedArray";
    case 1917: return "EmptyWeakFixedArray";
    case 1925: return "EmptyWeakArrayList";
    case 1937: return "TheHoleValue";
    case 1949: return "EmptyEnumCache";
    case 1961: return "EmptyDescriptorArray";
    case 2737: return "InvalidPrototypeValidityCell";
    case 3505: return "HashSeed";
    case 3749: return "EmptyPropertyDictionary";
    case 3793: return "EmptyOrderedPropertyDictionary";
    case 3817: return "EmptyByteArray";
    case 3825: return "EmptyScopeInfo";
    case 3849: return "EmptyPropertyArray";
    case 3857: return "MinusZeroValue";
    case 3869: return "NanValue";
    case 3881: return "HoleNanValue";
    case 3893: return "InfinityValue";
    case 3905: return "MinusInfinityValue";
    case 3917: return "MaxSafeInteger";
    case 3929: return "MaxUInt32";
    case 3941: return "SmiMinValue";
    case 3953: return "SmiMaxValuePlusOne";
    case 8525: return "NoOpInterceptorInfo";
    case 8565: return "EmptyArrayList";
    case 8577: return "EmptyObjectBoilerplateDescription";
    case 8593: return "EmptyArrayBoilerplateDescription";
    case 8605: return "EmptyClosureFeedbackCellArray";
    case 8625: return "EmptySwissPropertyDictionary";
    case 8657: return "SingleCharacterStringTable";
    case 23897: return "PropertyCellHoleValue";
    case 23909: return "HashTableHoleValue";
    case 23921: return "PromiseHoleValue";
    case 23933: return "UninitializedValue";
    case 23945: return "ArgumentsMarker";
    case 23957: return "TerminationException";
    case 23969: return "Exception";
    case 23981: return "OptimizedOut";
    case 23993: return "StaleRegister";
    case 24005: return "SelfReferenceMarker";
    case 24017: return "BasicBlockCountersMarker";
    case 25245: return "EmptySlowElementDictionary";
    case 25281: return "EmptySymbolTable";
    case 25309: return "EmptyOrderedHashMap";
    case 25329: return "EmptyOrderedHashSet";
    case 25349: return "EmptyFeedbackMetadata";
    case 25361: return "GlobalThisBindingScopeInfo";
    case 25393: return "EmptyFunctionScopeInfo";
    case 25429: return "NativeScopeInfo";
    case 25453: return "ShadowRealmScopeInfo";
    case 65533: return "WasmNull";
    case 154409: return "AsyncFunctionAwaitRejectClosureSharedFun";
    case 154457: return "AsyncFunctionAwaitResolveClosureSharedFun";
    case 154505: return "AsyncGeneratorAwaitResolveClosureSharedFun";
    case 154553: return "AsyncGeneratorAwaitRejectClosureSharedFun";
    case 154601: return "AsyncGeneratorYieldWithAwaitResolveClosureSharedFun";
    case 154649: return "AsyncGeneratorReturnResolveClosureSharedFun";
    case 154697: return "AsyncGeneratorReturnClosedResolveClosureSharedFun";
    case 154745: return "AsyncGeneratorReturnClosedRejectClosureSharedFun";
    case 154793: return "AsyncIteratorValueUnwrapSharedFun";
    case 154841: return "AsyncFromSyncIteratorCloseSyncAndRethrowSharedFun";
    case 154889: return "PromiseCapabilityDefaultResolveSharedFun";
    case 154937: return "PromiseCapabilityDefaultRejectSharedFun";
    case 154985: return "PromiseGetCapabilitiesExecutorSharedFun";
    case 155033: return "PromiseThenFinallySharedFun";
    case 155081: return "PromiseCatchFinallySharedFun";
    case 155129: return "PromiseValueThunkFinallySharedFun";
    case 155177: return "PromiseThrowerFinallySharedFun";
    case 155225: return "PromiseAllResolveElementClosureSharedFun";
    case 155273: return "PromiseAllSettledResolveElementClosureSharedFun";
    case 155321: return "PromiseAllSettledRejectElementClosureSharedFun";
    case 155369: return "PromiseAnyRejectElementClosureSharedFun";
    case 155417: return "ProxyRevokeSharedFun";
    case 155465: return "ShadowRealmImportValueFulfilledSharedFun";
    case 155513: return "SourceTextModuleExecuteAsyncModuleFulfilledSFI";
    case 155561: return "SourceTextModuleExecuteAsyncModuleRejectedSFI";
    case 155609: return "ArrayFromAsyncIterableOnFulfilledSharedFun";
    case 155657: return "ArrayFromAsyncIterableOnRejectedSharedFun";
    case 155705: return "ArrayFromAsyncArrayLikeOnFulfilledSharedFun";
    case 155753: return "ArrayFromAsyncArrayLikeOnRejectedSharedFun";
    case 155801: return "AtomicsMutexAsyncUnlockResolveHandlerSFI";
    case 155849: return "AtomicsMutexAsyncUnlockRejectHandlerSFI";
    case 155897: return "AtomicsConditionAcquireLockSFI";
    case 155945: return "AsyncDisposableStackOnFulfilledSharedFun";
    case 155993: return "AsyncDisposableStackOnRejectedSharedFun";
    case 156041: return "AsyncDisposeFromSyncDisposeSharedFun";
    case 156089: return "ArgumentsIteratorAccessor";
    case 156113: return "ArrayLengthAccessor";
    case 156137: return "BoundFunctionLengthAccessor";
    case 156161: return "BoundFunctionNameAccessor";
    case 156185: return "FunctionArgumentsAccessor";
    case 156209: return "FunctionCallerAccessor";
    case 156233: return "FunctionNameAccessor";
    case 156257: return "FunctionLengthAccessor";
    case 156281: return "FunctionPrototypeAccessor";
    case 156305: return "StringLengthAccessor";
    case 156329: return "ValueUnavailableAccessor";
    case 156353: return "WrappedFunctionLengthAccessor";
    case 156377: return "WrappedFunctionNameAccessor";
    default: return "";
  }
}

int FindKnownMapInstanceTypeInMapSpace(uintptr_t offset) {
  switch (offset) {
    default: return -1;
  }
}

int FindKnownMapInstanceTypeInOldSpace(uintptr_t offset) {
  switch (offset) {
    case 17: return 2129;
    case 57: return 2133;
    default: return -1;
  }
}

int FindKnownMapInstanceTypeInReadOnlySpace(uintptr_t offset) {
  switch (offset) {
    case 229: return 32;
    case 269: return 40;
    case 309: return 96;
    case 349: return 104;
    case 389: return 0;
    case 429: return 8;
    case 469: return 2;
    case 509: return 10;
    case 549: return 18;
    case 589: return 26;
    case 629: return 50;
    case 669: return 58;
    case 709: return 114;
    case 749: return 122;
    case 789: return 34;
    case 829: return 42;
    case 869: return 98;
    case 909: return 106;
    case 949: return 33;
    case 989: return 41;
    case 1029: return 35;
    case 1069: return 43;
    case 1109: return 37;
    case 1149: return 45;
    case 1189: return 128;
    case 1229: return 271;
    case 1269: return 131;
    case 1309: return 131;
    case 1349: return 131;
    case 1389: return 130;
    case 1429: return 129;
    case 1469: return 205;
    case 1509: return 195;
    case 1549: return 192;
    case 1589: return 255;
    case 1629: return 197;
    case 1669: return 294;
    case 1709: return 205;
    case 1749: return 249;
    case 1789: return 268;
    case 1829: return 150;
    case 1869: return 155;
    case 1977: return 279;
    case 2017: return 205;
    case 2057: return 259;
    case 2097: return 265;
    case 2137: return 204;
    case 2177: return 196;
    case 2217: return 272;
    case 2257: return 218;
    case 2297: return 264;
    case 2337: return 217;
    case 2377: return 194;
    case 2417: return 186;
    case 2457: return 267;
    case 2497: return 276;
    case 2537: return 244;
    case 2577: return 245;
    case 2617: return 246;
    case 2657: return 191;
    case 2697: return 258;
    case 2745: return 277;
    case 2785: return 266;
    case 2825: return 266;
    case 2865: return 157;
    case 2905: return 157;
    case 2945: return 157;
    case 2985: return 256;
    case 3025: return 206;
    case 3065: return 214;
    case 3105: return 209;
    case 3145: return 285;
    case 3185: return 208;
    case 3225: return 211;
    case 3265: return 215;
    case 3305: return 257;
    case 3345: return 203;
    case 3385: return 275;
    case 3425: return 281;
    case 3465: return 187;
    case 3965: return 132;
    case 4005: return 133;
    case 4045: return 134;
    case 4085: return 135;
    case 4125: return 136;
    case 4165: return 139;
    case 4205: return 140;
    case 4245: return 141;
    case 4285: return 142;
    case 4325: return 144;
    case 4365: return 145;
    case 4405: return 146;
    case 4445: return 147;
    case 4485: return 148;
    case 4525: return 149;
    case 4565: return 151;
    case 4605: return 152;
    case 4645: return 153;
    case 4685: return 154;
    case 4725: return 156;
    case 4765: return 158;
    case 4805: return 159;
    case 4845: return 160;
    case 4885: return 161;
    case 4925: return 162;
    case 4965: return 163;
    case 5005: return 164;
    case 5045: return 165;
    case 5085: return 166;
    case 5125: return 167;
    case 5165: return 168;
    case 5205: return 169;
    case 5245: return 170;
    case 5285: return 171;
    case 5325: return 172;
    case 5365: return 173;
    case 5405: return 174;
    case 5445: return 143;
    case 5485: return 143;
    case 5525: return 137;
    case 5565: return 137;
    case 5605: return 137;
    case 5645: return 138;
    case 5685: return 138;
    case 5725: return 138;
    case 5765: return 138;
    case 5805: return 253;
    case 5845: return 177;
    case 5885: return 175;
    case 5925: return 178;
    case 5965: return 176;
    case 6005: return 274;
    case 6045: return 254;
    case 6085: return 239;
    case 6125: return 243;
    case 6165: return 242;
    case 6205: return 240;
    case 6245: return 241;
    case 6285: return 233;
    case 6325: return 234;
    case 6365: return 236;
    case 6405: return 237;
    case 6445: return 230;
    case 6485: return 231;
    case 6525: return 269;
    case 6565: return 283;
    case 6605: return 282;
    case 6645: return 200;
    case 6685: return 201;
    case 6725: return 247;
    case 6765: return 248;
    case 6805: return 202;
    case 6845: return 284;
    case 6885: return 287;
    case 6925: return 291;
    case 6965: return 219;
    case 7005: return 250;
    case 7045: return 235;
    case 7085: return 238;
    case 7125: return 232;
    case 7165: return 270;
    case 7205: return 212;
    case 7245: return 213;
    case 7285: return 216;
    case 7325: return 210;
    case 7365: return 263;
    case 7405: return 207;
    case 7445: return 280;
    case 7485: return 273;
    case 7525: return 261;
    case 7565: return 278;
    case 7605: return 183;
    case 7645: return 184;
    case 7685: return 185;
    case 7725: return 251;
    case 7765: return 252;
    case 7805: return 260;
    case 7845: return 199;
    case 7885: return 180;
    case 7925: return 181;
    case 7965: return 189;
    case 8005: return 288;
    case 8045: return 182;
    case 8085: return 290;
    case 8125: return 292;
    case 8165: return 293;
    case 8205: return 286;
    case 8245: return 289;
    case 8285: return 190;
    case 8325: return 198;
    case 8365: return 295;
    case 8405: return 188;
    case 8445: return 193;
    case 8485: return 262;
    case 131073: return 2104;
    case 131141: return 2103;
    case 131181: return 2102;
    default: return -1;
  }
}

void FillInUnknownHeapAddresses(d::HeapAddresses* heap_addresses, uintptr_t any_uncompressed_ptr) {
  if (heap_addresses->any_heap_pointer == 0) {
    heap_addresses->any_heap_pointer = any_uncompressed_ptr;
  }
  if (heap_addresses->old_space_first_page == 0) {
    heap_addresses->old_space_first_page = i::V8HeapCompressionScheme::DecompressTagged(any_uncompressed_ptr, 1310720);
  }
  if (heap_addresses->read_only_space_first_page == 0) {
    heap_addresses->read_only_space_first_page = i::V8HeapCompressionScheme::DecompressTagged(any_uncompressed_ptr, 0);
  }
}

}
}
}
